// Code generated by glox-gen. DO NOT EDIT.

package main

type Stmt interface {
	Accept(StmtVisitor) any
}

type StmtVisitor interface {
	VisitExpressionStmt(Stmt) any
	VisitPrintStmt(Stmt) any
	VisitVarStmt(Stmt) any
}

type Expression struct {
	expr Expr
}

func (e *Expression) Accept(v StmtVisitor) (ret any) {
	return v.VisitExpressionStmt(e)
}

type Print struct {
	expr Expr
}

func (e *Print) Accept(v StmtVisitor) (ret any) {
	return v.VisitPrintStmt(e)
}

type Var struct {
	name        *Token
	initializer Expr
}

func (e *Var) Accept(v StmtVisitor) (ret any) {
	return v.VisitVarStmt(e)
}
